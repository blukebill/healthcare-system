name: CI/CD Pipeline

on:
  push:
    branches: [ "main", "master" ]
  pull_request:
    branches: [ "main", "master" ]
  workflow_dispatch:
    inputs:
      rollback_to:
        description: "Image tag or commit SHA to deploy"
        required: false
        default: ""
      security_scan:
        description: "Run container security scan"
        required: false
        default: "false"

jobs:
  build_test:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: write
      security-events: write

    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Cache pip
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}

      - name: Install Python deps
        run: pip install -r requirements.txt

      - name: Unit & integration tests
        env:
          PYTHONPATH: ${{ github.workspace }}
        run: pytest -m "not e2e" --junitxml=reports/junit.xml --cov=src --cov-report=xml:reports/coverage.xml

      - name: Build Docker image
        run: |
          IMAGE=ghcr.io/${{ github.repository_owner }}/healthcare-app:${{ github.sha }}
          echo "IMAGE=$IMAGE" >> $GITHUB_ENV
          echo ${{ secrets.GITHUB_TOKEN }} | docker login ghcr.io -u ${{ github.actor }} --password-stdin
          docker build -t $IMAGE .

      - name: Start app for e2e tests
        run: |
          docker compose -f docker-compose.test.yml up -d
          for i in {1..30}; do
            if curl -fsS http://localhost:8000/health >/dev/null; then echo "App is healthy"; break; fi
            echo "Waiting for app... ($i)"; sleep 2;
          done

      - name: E2E tests (http)
        env:
          BASE_URL: http://localhost:8000
        run: pytest -m e2e --junitxml=reports/junit-e2e.xml

      - name: Stop test stack
        if: always()
        run: docker compose -f docker-compose.test.yml down --volumes --remove-orphans

      - name: Push image to GHCR
        run: docker push $IMAGE

      - name: Upload test reports
        uses: actions/upload-artifact@v4
        with:
          name: test-reports
          path: reports/

      - name: Summarize
        run: |
          echo "## Build & Test Summary" >> $GITHUB_STEP_SUMMARY
          echo "- Commit: '${{ github.sha }}'" >> $GITHUB_STEP_SUMMARY
          echo "- Image: '${{ env.IMAGE }}'" >> $GITHUB_STEP_SUMMARY
          echo "- Unit/Integration & E2E tests executed" >> $GITHUB_STEP_SUMMARY

  deploy:
    runs-on: ubuntu-latest
    needs: build_test
    permissions:
      contents: write
      packages: read
    environment: staging

    steps:
      - uses: actions/checkout@v4

      - name: Choose image to deploy
        run: |
          if [ -n "${{ inputs.rollback_to }}" ]; then
            echo "IMAGE=ghcr.io/${{ github.repository_owner }}/healthcare-app:${{ inputs.rollback_to }}" >> $GITHUB_ENV
          else
            echo "IMAGE=ghcr.io/${{ github.repository_owner }}/healthcare-app:${{ github.sha }}" >> $GITHUB_ENV
          fi

      - name: Pull image
        run: |
          echo ${{ secrets.GITHUB_TOKEN }} | docker login ghcr.io -u ${{ github.actor }} --password-stdin
          docker pull $IMAGE

      - name: Deploy & health check
        run: |
          cat > docker-compose.deploy.yml <<'YAML'
          services:
            app:
              image: ${IMAGE}
              ports: ["8000:8000"]
              environment:
                - APP_VERSION=${DEPLOY_TAG:-unknown}
          YAML
          export DEPLOY_TAG=$(echo "$IMAGE" | awk -F: '{print $NF}')
          docker compose -f docker-compose.deploy.yml up -d
          for i in {1..30}; do
            if curl -fsS http://localhost:8000/health >/dev/null; then echo "Deployed & healthy"; break; fi
            echo "Waiting for deployed app... ($i)"; sleep 2;
          done
          curl -fsS http://localhost:8000/health | tee health.json

      - name: Logs (monitoring)
        run: docker ps && docker logs $(docker ps -q --filter "publish=8000") --tail=200 || true

      - name: Health snapshot upload
        uses: actions/upload-artifact@v4
        with:
          name: deploy-health
          path: health.json

      - name: Teardown deployment
        if: always()
        run: docker compose -f docker-compose.deploy.yml down --volumes --remove-orphans

